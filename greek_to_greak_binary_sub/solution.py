import time

# def solution(arr, k):
#      counter = 0
#      window_sum = 0
     
#      l = 0
#      r = 0
     
#      while l <= len(arr) - 1:
#          window_sum += arr[l]
         
#          while r <= len(arr) - 1:
#              r += 1
#              window_sum += arr[l]
#              if window_sum == k:
#                  counter += 1
#                  break
#          window_sum -= arr[l]
                  
#          l += 1
#          r = l
         
#      return(counter)
            

def solution(arr, k):
     counter  = 0
    
     for i in range(len(arr)): 
          for j in range(i, len(arr) ):
             if sum(arr[i:j+1]) == k:
                 counter += 1
                
     return (counter)

def atmost(nums, k):
    if k < 0:
        return 0
    l = 0
    cnt = 0
    res = 0

    for i in range(len(nums)):
        cnt += nums[i]

        # Adjust the window sum by removing
        # elements from the left until it is
        # at most k
        while cnt > k and l<=i:
            cnt -= nums[l]
            l += 1

        # Add the count of subarrays with
        # sum at most k for the current window
        res += (i - l + 1)

    return res

def numSubarraysWithSum(nums, goal):
    # Call atmost(nums, goal) and atmost
    # (nums, goal-1) to get the count of
    # subarrays with sum at most goal
    # and sum at most goal-1 respectively,
    # then subtract them to get the count
    # of subarrays with sum exactly
    # equal to goal
    return atmost(nums, goal) - atmost(nums, goal - 1)

test = [1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,11,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1]
start = time.time()
print(solution(test, 3))
end = time.time()
print(end - start)
print('------------------------')
start = time.time()
numSubarraysWithSum(test, 3)
end = time.time()
print(end - start)

